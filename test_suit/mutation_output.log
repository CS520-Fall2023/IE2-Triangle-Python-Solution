[*] Start mutation process:
   - targets: isTriangle
   - tests: test_mutationAdequate
[*] 14 tests passed:
   - test_mutationAdequate [0.00053 s]
[*] Start mutants generation and execution:
   - [#   1] AOR isTriangle: 
--------------------------------------------------------------------------------
  31:         if b == c:
  32:             trian += 3
  33:         
  34:         if trian == 0:
- 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
+ 35:             if (Decimal(a) - Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
  39:         
--------------------------------------------------------------------------------
[0.24976 s] survived
   - [#   2] AOR isTriangle: 
--------------------------------------------------------------------------------
  31:         if b == c:
  32:             trian += 3
  33:         
  34:         if trian == 0:
- 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
+ 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) - Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
  39:         
--------------------------------------------------------------------------------
[0.23332 s] survived
   - [#   3] AOR isTriangle: 
--------------------------------------------------------------------------------
  31:         if b == c:
  32:             trian += 3
  33:         
  34:         if trian == 0:
- 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
+ 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) - Decimal(c) <= Decimal(a)):
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
  39:         
--------------------------------------------------------------------------------
[0.24069 s] survived
   - [#   4] AOR isTriangle: 
--------------------------------------------------------------------------------
  39:         
  40:         if trian > 3:
  41:             return Triangle.Type.EQUILATERAL
  42:         
- 43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
+ 43:         if (trian == 1 and Decimal(a) - Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
  45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
  47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
--------------------------------------------------------------------------------
[0.23786 s] survived
   - [#   5] AOR isTriangle: 
--------------------------------------------------------------------------------
  41:             return Triangle.Type.EQUILATERAL
  42:         
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
- 45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
+ 45:         elif (trian == 2 and Decimal(a) - Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
  47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
  48:             return Triangle.Type.ISOSCELES
  49:         
--------------------------------------------------------------------------------
[0.22765 s] survived
   - [#   6] AOR isTriangle: 
--------------------------------------------------------------------------------
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
  45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
- 47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
+ 47:         elif (trian == 3 and Decimal(b) - Decimal(c) > Decimal(a)):
  48:             return Triangle.Type.ISOSCELES
  49:         
  50:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.23039 s] survived
   - [#   7] ASR isTriangle: 
--------------------------------------------------------------------------------
  24:         
  25:         trian = 0
  26:         
  27:         if a == b:
- 28:             trian += 1
+ 28:             trian -= 1
  29:         if a == c:
  30:             trian += 2
  31:         if b == c:
  32:             trian += 3
--------------------------------------------------------------------------------
[0.23322 s] survived
   - [#   8] ASR isTriangle: 
--------------------------------------------------------------------------------
  26:         
  27:         if a == b:
  28:             trian += 1
  29:         if a == c:
- 30:             trian += 2
+ 30:             trian -= 2
  31:         if b == c:
  32:             trian += 3
  33:         
  34:         if trian == 0:
--------------------------------------------------------------------------------
[0.23446 s] survived
   - [#   9] ASR isTriangle: 
--------------------------------------------------------------------------------
  28:             trian += 1
  29:         if a == c:
  30:             trian += 2
  31:         if b == c:
- 32:             trian += 3
+ 32:             trian -= 3
  33:         
  34:         if trian == 0:
  35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
  36:                 return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.23536 s] survived
   - [#  10] COI isTriangle: 
--------------------------------------------------------------------------------
  18:     def classify(a, b, c):'''
  19:         This static method does the actual classification of a triangle, given the lengths
  20:         of its three sides.
  21:         '''
- 22:         if (a <= 0 or b <= 0 or c <= 0):
+ 22:         if not ((a <= 0 or b <= 0 or c <= 0)):
  23:             return Triangle.Type.INVALID
  24:         
  25:         trian = 0
  26:         
--------------------------------------------------------------------------------
[0.23038 s] survived
   - [#  11] COI isTriangle: 
--------------------------------------------------------------------------------
  23:             return Triangle.Type.INVALID
  24:         
  25:         trian = 0
  26:         
- 27:         if a == b:
+ 27:         if not (a == b):
  28:             trian += 1
  29:         if a == c:
  30:             trian += 2
  31:         if b == c:
--------------------------------------------------------------------------------
[0.23735 s] survived
   - [#  12] COI isTriangle: 
--------------------------------------------------------------------------------
  25:         trian = 0
  26:         
  27:         if a == b:
  28:             trian += 1
- 29:         if a == c:
+ 29:         if not (a == c):
  30:             trian += 2
  31:         if b == c:
  32:             trian += 3
  33:         
--------------------------------------------------------------------------------
[0.23797 s] survived
   - [#  13] COI isTriangle: 
--------------------------------------------------------------------------------
  27:         if a == b:
  28:             trian += 1
  29:         if a == c:
  30:             trian += 2
- 31:         if b == c:
+ 31:         if not (b == c):
  32:             trian += 3
  33:         
  34:         if trian == 0:
  35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
--------------------------------------------------------------------------------
[0.23186 s] survived
   - [#  14] COI isTriangle: 
--------------------------------------------------------------------------------
  30:             trian += 2
  31:         if b == c:
  32:             trian += 3
  33:         
- 34:         if trian == 0:
+ 34:         if not (trian == 0):
  35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
--------------------------------------------------------------------------------
[0.22681 s] survived
   - [#  15] COI isTriangle: 
--------------------------------------------------------------------------------
  31:         if b == c:
  32:             trian += 3
  33:         
  34:         if trian == 0:
- 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
+ 35:             if not ((Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a))):
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
  39:         
--------------------------------------------------------------------------------
[0.23847 s] survived
   - [#  16] COI isTriangle: 
--------------------------------------------------------------------------------
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
  39:         
- 40:         if trian > 3:
+ 40:         if not (trian > 3):
  41:             return Triangle.Type.EQUILATERAL
  42:         
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.23476 s] survived
   - [#  17] COI isTriangle: 
--------------------------------------------------------------------------------
  39:         
  40:         if trian > 3:
  41:             return Triangle.Type.EQUILATERAL
  42:         
- 43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
+ 43:         if not ((trian == 1 and Decimal(a) + Decimal(b) > Decimal(c))):
  44:             return Triangle.Type.ISOSCELES
  45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
  47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
--------------------------------------------------------------------------------
[0.23478 s] survived
   - [#  18] COI isTriangle: 
--------------------------------------------------------------------------------
  41:             return Triangle.Type.EQUILATERAL
  42:         
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
- 45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
+ 45:         elif not ((trian == 2 and Decimal(a) + Decimal(c) > Decimal(b))):
  46:             return Triangle.Type.ISOSCELES
  47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
  48:             return Triangle.Type.ISOSCELES
  49:         
--------------------------------------------------------------------------------
[0.22982 s] survived
   - [#  19] COI isTriangle: 
--------------------------------------------------------------------------------
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
  45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
- 47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
+ 47:         elif not ((trian == 3 and Decimal(b) + Decimal(c) > Decimal(a))):
  48:             return Triangle.Type.ISOSCELES
  49:         
  50:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.23495 s] survived
   - [#  20] DDL isTriangle: 
--------------------------------------------------------------------------------
  13:         EQUILATERAL = 2
  14:         ISOSCELES = 3
  15:     
  16:     
- 17:     @staticmethod
- 18:     def classify(a, b, c):'''
+ 17:     def classify(a, b, c):
+ 18:         '''
  19:         This static method does the actual classification of a triangle, given the lengths
  20:         of its three sides.
  21:         '''
  22:         if (a <= 0 or b <= 0 or c <= 0):
--------------------------------------------------------------------------------
[0.23497 s] survived
   - [#  21] LCR isTriangle: 
--------------------------------------------------------------------------------
  18:     def classify(a, b, c):'''
  19:         This static method does the actual classification of a triangle, given the lengths
  20:         of its three sides.
  21:         '''
- 22:         if (a <= 0 or b <= 0 or c <= 0):
+ 22:         if (a <= 0 and b <= 0 and c <= 0):
  23:             return Triangle.Type.INVALID
  24:         
  25:         trian = 0
  26:         
--------------------------------------------------------------------------------
[0.23337 s] survived
   - [#  22] LCR isTriangle: 
--------------------------------------------------------------------------------
  31:         if b == c:
  32:             trian += 3
  33:         
  34:         if trian == 0:
- 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
+ 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) and Decimal(a) + Decimal(c) <= Decimal(b) and Decimal(b) + Decimal(c) <= Decimal(a)):
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
  39:         
--------------------------------------------------------------------------------
[0.23098 s] survived
   - [#  23] LCR isTriangle: 
--------------------------------------------------------------------------------
  39:         
  40:         if trian > 3:
  41:             return Triangle.Type.EQUILATERAL
  42:         
- 43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
+ 43:         if (trian == 1 or Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
  45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
  47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
--------------------------------------------------------------------------------
[0.23864 s] survived
   - [#  24] LCR isTriangle: 
--------------------------------------------------------------------------------
  41:             return Triangle.Type.EQUILATERAL
  42:         
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
- 45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
+ 45:         elif (trian == 2 or Decimal(a) + Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
  47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
  48:             return Triangle.Type.ISOSCELES
  49:         
--------------------------------------------------------------------------------
[0.24297 s] survived
   - [#  25] LCR isTriangle: 
--------------------------------------------------------------------------------
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
  45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
- 47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
+ 47:         elif (trian == 3 or Decimal(b) + Decimal(c) > Decimal(a)):
  48:             return Triangle.Type.ISOSCELES
  49:         
  50:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.22959 s] survived
   - [#  26] ROR isTriangle: 
--------------------------------------------------------------------------------
  18:     def classify(a, b, c):'''
  19:         This static method does the actual classification of a triangle, given the lengths
  20:         of its three sides.
  21:         '''
- 22:         if (a <= 0 or b <= 0 or c <= 0):
+ 22:         if (a >= 0 or b <= 0 or c <= 0):
  23:             return Triangle.Type.INVALID
  24:         
  25:         trian = 0
  26:         
--------------------------------------------------------------------------------
[0.23474 s] survived
   - [#  27] ROR isTriangle: 
--------------------------------------------------------------------------------
  18:     def classify(a, b, c):'''
  19:         This static method does the actual classification of a triangle, given the lengths
  20:         of its three sides.
  21:         '''
- 22:         if (a <= 0 or b <= 0 or c <= 0):
+ 22:         if (a < 0 or b <= 0 or c <= 0):
  23:             return Triangle.Type.INVALID
  24:         
  25:         trian = 0
  26:         
--------------------------------------------------------------------------------
[0.22793 s] survived
   - [#  28] ROR isTriangle: 
--------------------------------------------------------------------------------
  18:     def classify(a, b, c):'''
  19:         This static method does the actual classification of a triangle, given the lengths
  20:         of its three sides.
  21:         '''
- 22:         if (a <= 0 or b <= 0 or c <= 0):
+ 22:         if (a <= 0 or b >= 0 or c <= 0):
  23:             return Triangle.Type.INVALID
  24:         
  25:         trian = 0
  26:         
--------------------------------------------------------------------------------
[0.23419 s] survived
   - [#  29] ROR isTriangle: 
--------------------------------------------------------------------------------
  18:     def classify(a, b, c):'''
  19:         This static method does the actual classification of a triangle, given the lengths
  20:         of its three sides.
  21:         '''
- 22:         if (a <= 0 or b <= 0 or c <= 0):
+ 22:         if (a <= 0 or b < 0 or c <= 0):
  23:             return Triangle.Type.INVALID
  24:         
  25:         trian = 0
  26:         
--------------------------------------------------------------------------------
[0.22602 s] survived
   - [#  30] ROR isTriangle: 
--------------------------------------------------------------------------------
  18:     def classify(a, b, c):'''
  19:         This static method does the actual classification of a triangle, given the lengths
  20:         of its three sides.
  21:         '''
- 22:         if (a <= 0 or b <= 0 or c <= 0):
+ 22:         if (a <= 0 or b <= 0 or c >= 0):
  23:             return Triangle.Type.INVALID
  24:         
  25:         trian = 0
  26:         
--------------------------------------------------------------------------------
[0.23581 s] survived
   - [#  31] ROR isTriangle: 
--------------------------------------------------------------------------------
  18:     def classify(a, b, c):'''
  19:         This static method does the actual classification of a triangle, given the lengths
  20:         of its three sides.
  21:         '''
- 22:         if (a <= 0 or b <= 0 or c <= 0):
+ 22:         if (a <= 0 or b <= 0 or c < 0):
  23:             return Triangle.Type.INVALID
  24:         
  25:         trian = 0
  26:         
--------------------------------------------------------------------------------
[0.23013 s] survived
   - [#  32] ROR isTriangle: 
--------------------------------------------------------------------------------
  23:             return Triangle.Type.INVALID
  24:         
  25:         trian = 0
  26:         
- 27:         if a == b:
+ 27:         if a != b:
  28:             trian += 1
  29:         if a == c:
  30:             trian += 2
  31:         if b == c:
--------------------------------------------------------------------------------
[0.23167 s] survived
   - [#  33] ROR isTriangle: 
--------------------------------------------------------------------------------
  25:         trian = 0
  26:         
  27:         if a == b:
  28:             trian += 1
- 29:         if a == c:
+ 29:         if a != c:
  30:             trian += 2
  31:         if b == c:
  32:             trian += 3
  33:         
--------------------------------------------------------------------------------
[0.23380 s] survived
   - [#  34] ROR isTriangle: 
--------------------------------------------------------------------------------
  27:         if a == b:
  28:             trian += 1
  29:         if a == c:
  30:             trian += 2
- 31:         if b == c:
+ 31:         if b != c:
  32:             trian += 3
  33:         
  34:         if trian == 0:
  35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
--------------------------------------------------------------------------------
[0.23420 s] survived
   - [#  35] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:             trian += 2
  31:         if b == c:
  32:             trian += 3
  33:         
- 34:         if trian == 0:
+ 34:         if trian != 0:
  35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
--------------------------------------------------------------------------------
[0.23316 s] survived
   - [#  36] ROR isTriangle: 
--------------------------------------------------------------------------------
  31:         if b == c:
  32:             trian += 3
  33:         
  34:         if trian == 0:
- 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
+ 35:             if (Decimal(a) + Decimal(b) >= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
  39:         
--------------------------------------------------------------------------------
[0.23244 s] survived
   - [#  37] ROR isTriangle: 
--------------------------------------------------------------------------------
  31:         if b == c:
  32:             trian += 3
  33:         
  34:         if trian == 0:
- 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
+ 35:             if (Decimal(a) + Decimal(b) < Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
  39:         
--------------------------------------------------------------------------------
[0.22717 s] survived
   - [#  38] ROR isTriangle: 
--------------------------------------------------------------------------------
  31:         if b == c:
  32:             trian += 3
  33:         
  34:         if trian == 0:
- 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
+ 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) >= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
  39:         
--------------------------------------------------------------------------------
[0.23244 s] survived
   - [#  39] ROR isTriangle: 
--------------------------------------------------------------------------------
  31:         if b == c:
  32:             trian += 3
  33:         
  34:         if trian == 0:
- 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
+ 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) < Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
  39:         
--------------------------------------------------------------------------------
[0.22934 s] survived
   - [#  40] ROR isTriangle: 
--------------------------------------------------------------------------------
  31:         if b == c:
  32:             trian += 3
  33:         
  34:         if trian == 0:
- 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
+ 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) >= Decimal(a)):
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
  39:         
--------------------------------------------------------------------------------
[0.23198 s] survived
   - [#  41] ROR isTriangle: 
--------------------------------------------------------------------------------
  31:         if b == c:
  32:             trian += 3
  33:         
  34:         if trian == 0:
- 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
+ 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) < Decimal(a)):
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
  39:         
--------------------------------------------------------------------------------
[0.22659 s] survived
   - [#  42] ROR isTriangle: 
--------------------------------------------------------------------------------
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
  39:         
- 40:         if trian > 3:
+ 40:         if trian < 3:
  41:             return Triangle.Type.EQUILATERAL
  42:         
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.23833 s] survived
   - [#  43] ROR isTriangle: 
--------------------------------------------------------------------------------
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
  39:         
- 40:         if trian > 3:
+ 40:         if trian >= 3:
  41:             return Triangle.Type.EQUILATERAL
  42:         
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.23024 s] survived
   - [#  44] ROR isTriangle: 
--------------------------------------------------------------------------------
  39:         
  40:         if trian > 3:
  41:             return Triangle.Type.EQUILATERAL
  42:         
- 43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
+ 43:         if (trian != 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
  45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
  47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
--------------------------------------------------------------------------------
[0.23492 s] survived
   - [#  45] ROR isTriangle: 
--------------------------------------------------------------------------------
  39:         
  40:         if trian > 3:
  41:             return Triangle.Type.EQUILATERAL
  42:         
- 43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
+ 43:         if (trian == 1 and Decimal(a) + Decimal(b) < Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
  45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
  47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
--------------------------------------------------------------------------------
[0.24238 s] survived
   - [#  46] ROR isTriangle: 
--------------------------------------------------------------------------------
  39:         
  40:         if trian > 3:
  41:             return Triangle.Type.EQUILATERAL
  42:         
- 43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
+ 43:         if (trian == 1 and Decimal(a) + Decimal(b) >= Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
  45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
  47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
--------------------------------------------------------------------------------
[0.23362 s] survived
   - [#  47] ROR isTriangle: 
--------------------------------------------------------------------------------
  41:             return Triangle.Type.EQUILATERAL
  42:         
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
- 45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
+ 45:         elif (trian != 2 and Decimal(a) + Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
  47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
  48:             return Triangle.Type.ISOSCELES
  49:         
--------------------------------------------------------------------------------
[0.22948 s] survived
   - [#  48] ROR isTriangle: 
--------------------------------------------------------------------------------
  41:             return Triangle.Type.EQUILATERAL
  42:         
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
- 45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
+ 45:         elif (trian == 2 and Decimal(a) + Decimal(c) < Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
  47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
  48:             return Triangle.Type.ISOSCELES
  49:         
--------------------------------------------------------------------------------
[0.23110 s] survived
   - [#  49] ROR isTriangle: 
--------------------------------------------------------------------------------
  41:             return Triangle.Type.EQUILATERAL
  42:         
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
- 45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
+ 45:         elif (trian == 2 and Decimal(a) + Decimal(c) >= Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
  47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
  48:             return Triangle.Type.ISOSCELES
  49:         
--------------------------------------------------------------------------------
[0.23147 s] survived
   - [#  50] ROR isTriangle: 
--------------------------------------------------------------------------------
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
  45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
- 47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
+ 47:         elif (trian != 3 and Decimal(b) + Decimal(c) > Decimal(a)):
  48:             return Triangle.Type.ISOSCELES
  49:         
  50:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.23836 s] survived
   - [#  51] ROR isTriangle: 
--------------------------------------------------------------------------------
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
  45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
- 47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
+ 47:         elif (trian == 3 and Decimal(b) + Decimal(c) < Decimal(a)):
  48:             return Triangle.Type.ISOSCELES
  49:         
  50:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.23901 s] survived
   - [#  52] ROR isTriangle: 
--------------------------------------------------------------------------------
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
  45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
- 47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
+ 47:         elif (trian == 3 and Decimal(b) + Decimal(c) >= Decimal(a)):
  48:             return Triangle.Type.ISOSCELES
  49:         
  50:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.22825 s] survived
[*] Mutation score [13.32505 s]: 0.0%
   - all: 52
   - killed: 0 (0.0%)
   - survived: 52 (100.0%)
   - incompetent: 0 (0.0%)
   - timeout: 0 (0.0%)
[*] Start mutation process:
   - targets: isTriangle
   - tests: test_mutationAdequate
[*] 14 tests passed:
   - test_mutationAdequate [0.00066 s]
[*] Start mutants generation and execution:
   - [#   1] AOR isTriangle: 
--------------------------------------------------------------------------------
  31:         if b == c:
  32:             trian += 3
  33:         
  34:         if trian == 0:
- 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
+ 35:             if (Decimal(a) - Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
  39:         
--------------------------------------------------------------------------------
[0.23613 s] survived
   - [#   2] AOR isTriangle: 
--------------------------------------------------------------------------------
  31:         if b == c:
  32:             trian += 3
  33:         
  34:         if trian == 0:
- 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
+ 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) - Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
  39:         
--------------------------------------------------------------------------------
[0.23695 s] survived
   - [#   3] AOR isTriangle: 
--------------------------------------------------------------------------------
  31:         if b == c:
  32:             trian += 3
  33:         
  34:         if trian == 0:
- 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
+ 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) - Decimal(c) <= Decimal(a)):
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
  39:         
--------------------------------------------------------------------------------
[0.23849 s] survived
   - [#   4] AOR isTriangle: 
--------------------------------------------------------------------------------
  39:         
  40:         if trian > 3:
  41:             return Triangle.Type.EQUILATERAL
  42:         
- 43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
+ 43:         if (trian == 1 and Decimal(a) - Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
  45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
  47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
--------------------------------------------------------------------------------
[0.23301 s] survived
   - [#   5] AOR isTriangle: 
--------------------------------------------------------------------------------
  41:             return Triangle.Type.EQUILATERAL
  42:         
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
- 45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
+ 45:         elif (trian == 2 and Decimal(a) - Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
  47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
  48:             return Triangle.Type.ISOSCELES
  49:         
--------------------------------------------------------------------------------
[0.24390 s] survived
   - [#   6] AOR isTriangle: 
--------------------------------------------------------------------------------
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
  45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
- 47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
+ 47:         elif (trian == 3 and Decimal(b) - Decimal(c) > Decimal(a)):
  48:             return Triangle.Type.ISOSCELES
  49:         
  50:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.23302 s] survived
   - [#   7] ASR isTriangle: 
--------------------------------------------------------------------------------
  24:         
  25:         trian = 0
  26:         
  27:         if a == b:
- 28:             trian += 1
+ 28:             trian -= 1
  29:         if a == c:
  30:             trian += 2
  31:         if b == c:
  32:             trian += 3
--------------------------------------------------------------------------------
[0.23139 s] survived
   - [#   8] ASR isTriangle: 
--------------------------------------------------------------------------------
  26:         
  27:         if a == b:
  28:             trian += 1
  29:         if a == c:
- 30:             trian += 2
+ 30:             trian -= 2
  31:         if b == c:
  32:             trian += 3
  33:         
  34:         if trian == 0:
--------------------------------------------------------------------------------
[0.23131 s] survived
   - [#   9] ASR isTriangle: 
--------------------------------------------------------------------------------
  28:             trian += 1
  29:         if a == c:
  30:             trian += 2
  31:         if b == c:
- 32:             trian += 3
+ 32:             trian -= 3
  33:         
  34:         if trian == 0:
  35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
  36:                 return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.23026 s] survived
   - [#  10] COI isTriangle: 
--------------------------------------------------------------------------------
  18:     def classify(a, b, c):'''
  19:         This static method does the actual classification of a triangle, given the lengths
  20:         of its three sides.
  21:         '''
- 22:         if (a <= 0 or b <= 0 or c <= 0):
+ 22:         if not ((a <= 0 or b <= 0 or c <= 0)):
  23:             return Triangle.Type.INVALID
  24:         
  25:         trian = 0
  26:         
--------------------------------------------------------------------------------
[0.23411 s] survived
   - [#  11] COI isTriangle: 
--------------------------------------------------------------------------------
  23:             return Triangle.Type.INVALID
  24:         
  25:         trian = 0
  26:         
- 27:         if a == b:
+ 27:         if not (a == b):
  28:             trian += 1
  29:         if a == c:
  30:             trian += 2
  31:         if b == c:
--------------------------------------------------------------------------------
[0.23094 s] survived
   - [#  12] COI isTriangle: 
--------------------------------------------------------------------------------
  25:         trian = 0
  26:         
  27:         if a == b:
  28:             trian += 1
- 29:         if a == c:
+ 29:         if not (a == c):
  30:             trian += 2
  31:         if b == c:
  32:             trian += 3
  33:         
--------------------------------------------------------------------------------
[0.22968 s] survived
   - [#  13] COI isTriangle: 
--------------------------------------------------------------------------------
  27:         if a == b:
  28:             trian += 1
  29:         if a == c:
  30:             trian += 2
- 31:         if b == c:
+ 31:         if not (b == c):
  32:             trian += 3
  33:         
  34:         if trian == 0:
  35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
--------------------------------------------------------------------------------
[0.23155 s] survived
   - [#  14] COI isTriangle: 
--------------------------------------------------------------------------------
  30:             trian += 2
  31:         if b == c:
  32:             trian += 3
  33:         
- 34:         if trian == 0:
+ 34:         if not (trian == 0):
  35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
--------------------------------------------------------------------------------
[0.23139 s] survived
   - [#  15] COI isTriangle: 
--------------------------------------------------------------------------------
  31:         if b == c:
  32:             trian += 3
  33:         
  34:         if trian == 0:
- 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
+ 35:             if not ((Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a))):
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
  39:         
--------------------------------------------------------------------------------
[0.23603 s] survived
   - [#  16] COI isTriangle: 
--------------------------------------------------------------------------------
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
  39:         
- 40:         if trian > 3:
+ 40:         if not (trian > 3):
  41:             return Triangle.Type.EQUILATERAL
  42:         
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.23942 s] survived
   - [#  17] COI isTriangle: 
--------------------------------------------------------------------------------
  39:         
  40:         if trian > 3:
  41:             return Triangle.Type.EQUILATERAL
  42:         
- 43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
+ 43:         if not ((trian == 1 and Decimal(a) + Decimal(b) > Decimal(c))):
  44:             return Triangle.Type.ISOSCELES
  45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
  47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
--------------------------------------------------------------------------------
[0.23271 s] survived
   - [#  18] COI isTriangle: 
--------------------------------------------------------------------------------
  41:             return Triangle.Type.EQUILATERAL
  42:         
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
- 45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
+ 45:         elif not ((trian == 2 and Decimal(a) + Decimal(c) > Decimal(b))):
  46:             return Triangle.Type.ISOSCELES
  47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
  48:             return Triangle.Type.ISOSCELES
  49:         
--------------------------------------------------------------------------------
[0.23698 s] survived
   - [#  19] COI isTriangle: 
--------------------------------------------------------------------------------
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
  45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
- 47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
+ 47:         elif not ((trian == 3 and Decimal(b) + Decimal(c) > Decimal(a))):
  48:             return Triangle.Type.ISOSCELES
  49:         
  50:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.22725 s] survived
   - [#  20] DDL isTriangle: 
--------------------------------------------------------------------------------
  13:         EQUILATERAL = 2
  14:         ISOSCELES = 3
  15:     
  16:     
- 17:     @staticmethod
- 18:     def classify(a, b, c):'''
+ 17:     def classify(a, b, c):
+ 18:         '''
  19:         This static method does the actual classification of a triangle, given the lengths
  20:         of its three sides.
  21:         '''
  22:         if (a <= 0 or b <= 0 or c <= 0):
--------------------------------------------------------------------------------
[0.23269 s] survived
   - [#  21] LCR isTriangle: 
--------------------------------------------------------------------------------
  18:     def classify(a, b, c):'''
  19:         This static method does the actual classification of a triangle, given the lengths
  20:         of its three sides.
  21:         '''
- 22:         if (a <= 0 or b <= 0 or c <= 0):
+ 22:         if (a <= 0 and b <= 0 and c <= 0):
  23:             return Triangle.Type.INVALID
  24:         
  25:         trian = 0
  26:         
--------------------------------------------------------------------------------
[0.23392 s] survived
   - [#  22] LCR isTriangle: 
--------------------------------------------------------------------------------
  31:         if b == c:
  32:             trian += 3
  33:         
  34:         if trian == 0:
- 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
+ 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) and Decimal(a) + Decimal(c) <= Decimal(b) and Decimal(b) + Decimal(c) <= Decimal(a)):
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
  39:         
--------------------------------------------------------------------------------
[0.24591 s] survived
   - [#  23] LCR isTriangle: 
--------------------------------------------------------------------------------
  39:         
  40:         if trian > 3:
  41:             return Triangle.Type.EQUILATERAL
  42:         
- 43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
+ 43:         if (trian == 1 or Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
  45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
  47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
--------------------------------------------------------------------------------
[0.23566 s] survived
   - [#  24] LCR isTriangle: 
--------------------------------------------------------------------------------
  41:             return Triangle.Type.EQUILATERAL
  42:         
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
- 45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
+ 45:         elif (trian == 2 or Decimal(a) + Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
  47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
  48:             return Triangle.Type.ISOSCELES
  49:         
--------------------------------------------------------------------------------
[0.23129 s] survived
   - [#  25] LCR isTriangle: 
--------------------------------------------------------------------------------
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
  45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
- 47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
+ 47:         elif (trian == 3 or Decimal(b) + Decimal(c) > Decimal(a)):
  48:             return Triangle.Type.ISOSCELES
  49:         
  50:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.22715 s] survived
   - [#  26] ROR isTriangle: 
--------------------------------------------------------------------------------
  18:     def classify(a, b, c):'''
  19:         This static method does the actual classification of a triangle, given the lengths
  20:         of its three sides.
  21:         '''
- 22:         if (a <= 0 or b <= 0 or c <= 0):
+ 22:         if (a >= 0 or b <= 0 or c <= 0):
  23:             return Triangle.Type.INVALID
  24:         
  25:         trian = 0
  26:         
--------------------------------------------------------------------------------
[0.25149 s] survived
   - [#  27] ROR isTriangle: 
--------------------------------------------------------------------------------
  18:     def classify(a, b, c):'''
  19:         This static method does the actual classification of a triangle, given the lengths
  20:         of its three sides.
  21:         '''
- 22:         if (a <= 0 or b <= 0 or c <= 0):
+ 22:         if (a < 0 or b <= 0 or c <= 0):
  23:             return Triangle.Type.INVALID
  24:         
  25:         trian = 0
  26:         
--------------------------------------------------------------------------------
[0.25293 s] survived
   - [#  28] ROR isTriangle: 
--------------------------------------------------------------------------------
  18:     def classify(a, b, c):'''
  19:         This static method does the actual classification of a triangle, given the lengths
  20:         of its three sides.
  21:         '''
- 22:         if (a <= 0 or b <= 0 or c <= 0):
+ 22:         if (a <= 0 or b >= 0 or c <= 0):
  23:             return Triangle.Type.INVALID
  24:         
  25:         trian = 0
  26:         
--------------------------------------------------------------------------------
[0.23661 s] survived
   - [#  29] ROR isTriangle: 
--------------------------------------------------------------------------------
  18:     def classify(a, b, c):'''
  19:         This static method does the actual classification of a triangle, given the lengths
  20:         of its three sides.
  21:         '''
- 22:         if (a <= 0 or b <= 0 or c <= 0):
+ 22:         if (a <= 0 or b < 0 or c <= 0):
  23:             return Triangle.Type.INVALID
  24:         
  25:         trian = 0
  26:         
--------------------------------------------------------------------------------
[0.23254 s] survived
   - [#  30] ROR isTriangle: 
--------------------------------------------------------------------------------
  18:     def classify(a, b, c):'''
  19:         This static method does the actual classification of a triangle, given the lengths
  20:         of its three sides.
  21:         '''
- 22:         if (a <= 0 or b <= 0 or c <= 0):
+ 22:         if (a <= 0 or b <= 0 or c >= 0):
  23:             return Triangle.Type.INVALID
  24:         
  25:         trian = 0
  26:         
--------------------------------------------------------------------------------
[0.24206 s] survived
   - [#  31] ROR isTriangle: 
--------------------------------------------------------------------------------
  18:     def classify(a, b, c):'''
  19:         This static method does the actual classification of a triangle, given the lengths
  20:         of its three sides.
  21:         '''
- 22:         if (a <= 0 or b <= 0 or c <= 0):
+ 22:         if (a <= 0 or b <= 0 or c < 0):
  23:             return Triangle.Type.INVALID
  24:         
  25:         trian = 0
  26:         
--------------------------------------------------------------------------------
[0.24061 s] survived
   - [#  32] ROR isTriangle: 
--------------------------------------------------------------------------------
  23:             return Triangle.Type.INVALID
  24:         
  25:         trian = 0
  26:         
- 27:         if a == b:
+ 27:         if a != b:
  28:             trian += 1
  29:         if a == c:
  30:             trian += 2
  31:         if b == c:
--------------------------------------------------------------------------------
[0.23077 s] survived
   - [#  33] ROR isTriangle: 
--------------------------------------------------------------------------------
  25:         trian = 0
  26:         
  27:         if a == b:
  28:             trian += 1
- 29:         if a == c:
+ 29:         if a != c:
  30:             trian += 2
  31:         if b == c:
  32:             trian += 3
  33:         
--------------------------------------------------------------------------------
[0.23085 s] survived
   - [#  34] ROR isTriangle: 
--------------------------------------------------------------------------------
  27:         if a == b:
  28:             trian += 1
  29:         if a == c:
  30:             trian += 2
- 31:         if b == c:
+ 31:         if b != c:
  32:             trian += 3
  33:         
  34:         if trian == 0:
  35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
--------------------------------------------------------------------------------
[0.23369 s] survived
   - [#  35] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:             trian += 2
  31:         if b == c:
  32:             trian += 3
  33:         
- 34:         if trian == 0:
+ 34:         if trian != 0:
  35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
--------------------------------------------------------------------------------
[0.22975 s] survived
   - [#  36] ROR isTriangle: 
--------------------------------------------------------------------------------
  31:         if b == c:
  32:             trian += 3
  33:         
  34:         if trian == 0:
- 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
+ 35:             if (Decimal(a) + Decimal(b) >= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
  39:         
--------------------------------------------------------------------------------
[0.24271 s] survived
   - [#  37] ROR isTriangle: 
--------------------------------------------------------------------------------
  31:         if b == c:
  32:             trian += 3
  33:         
  34:         if trian == 0:
- 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
+ 35:             if (Decimal(a) + Decimal(b) < Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
  39:         
--------------------------------------------------------------------------------
[0.22836 s] survived
   - [#  38] ROR isTriangle: 
--------------------------------------------------------------------------------
  31:         if b == c:
  32:             trian += 3
  33:         
  34:         if trian == 0:
- 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
+ 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) >= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
  39:         
--------------------------------------------------------------------------------
[0.24729 s] survived
   - [#  39] ROR isTriangle: 
--------------------------------------------------------------------------------
  31:         if b == c:
  32:             trian += 3
  33:         
  34:         if trian == 0:
- 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
+ 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) < Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
  39:         
--------------------------------------------------------------------------------
[0.23422 s] survived
   - [#  40] ROR isTriangle: 
--------------------------------------------------------------------------------
  31:         if b == c:
  32:             trian += 3
  33:         
  34:         if trian == 0:
- 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
+ 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) >= Decimal(a)):
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
  39:         
--------------------------------------------------------------------------------
[0.23962 s] survived
   - [#  41] ROR isTriangle: 
--------------------------------------------------------------------------------
  31:         if b == c:
  32:             trian += 3
  33:         
  34:         if trian == 0:
- 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) <= Decimal(a)):
+ 35:             if (Decimal(a) + Decimal(b) <= Decimal(c) or Decimal(a) + Decimal(c) <= Decimal(b) or Decimal(b) + Decimal(c) < Decimal(a)):
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
  39:         
--------------------------------------------------------------------------------
[0.23779 s] survived
   - [#  42] ROR isTriangle: 
--------------------------------------------------------------------------------
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
  39:         
- 40:         if trian > 3:
+ 40:         if trian < 3:
  41:             return Triangle.Type.EQUILATERAL
  42:         
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.23990 s] survived
   - [#  43] ROR isTriangle: 
--------------------------------------------------------------------------------
  36:                 return Triangle.Type.INVALID
  37:             else:
  38:                 return Triangle.Type.SCALENE
  39:         
- 40:         if trian > 3:
+ 40:         if trian >= 3:
  41:             return Triangle.Type.EQUILATERAL
  42:         
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.23844 s] survived
   - [#  44] ROR isTriangle: 
--------------------------------------------------------------------------------
  39:         
  40:         if trian > 3:
  41:             return Triangle.Type.EQUILATERAL
  42:         
- 43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
+ 43:         if (trian != 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
  45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
  47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
--------------------------------------------------------------------------------
[0.23965 s] survived
   - [#  45] ROR isTriangle: 
--------------------------------------------------------------------------------
  39:         
  40:         if trian > 3:
  41:             return Triangle.Type.EQUILATERAL
  42:         
- 43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
+ 43:         if (trian == 1 and Decimal(a) + Decimal(b) < Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
  45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
  47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
--------------------------------------------------------------------------------
[0.23882 s] survived
   - [#  46] ROR isTriangle: 
--------------------------------------------------------------------------------
  39:         
  40:         if trian > 3:
  41:             return Triangle.Type.EQUILATERAL
  42:         
- 43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
+ 43:         if (trian == 1 and Decimal(a) + Decimal(b) >= Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
  45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
  47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
--------------------------------------------------------------------------------
[0.23689 s] survived
   - [#  47] ROR isTriangle: 
--------------------------------------------------------------------------------
  41:             return Triangle.Type.EQUILATERAL
  42:         
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
- 45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
+ 45:         elif (trian != 2 and Decimal(a) + Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
  47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
  48:             return Triangle.Type.ISOSCELES
  49:         
--------------------------------------------------------------------------------
[0.23685 s] survived
   - [#  48] ROR isTriangle: 
--------------------------------------------------------------------------------
  41:             return Triangle.Type.EQUILATERAL
  42:         
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
- 45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
+ 45:         elif (trian == 2 and Decimal(a) + Decimal(c) < Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
  47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
  48:             return Triangle.Type.ISOSCELES
  49:         
--------------------------------------------------------------------------------
[0.23244 s] survived
   - [#  49] ROR isTriangle: 
--------------------------------------------------------------------------------
  41:             return Triangle.Type.EQUILATERAL
  42:         
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
- 45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
+ 45:         elif (trian == 2 and Decimal(a) + Decimal(c) >= Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
  47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
  48:             return Triangle.Type.ISOSCELES
  49:         
--------------------------------------------------------------------------------
[0.23282 s] survived
   - [#  50] ROR isTriangle: 
--------------------------------------------------------------------------------
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
  45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
- 47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
+ 47:         elif (trian != 3 and Decimal(b) + Decimal(c) > Decimal(a)):
  48:             return Triangle.Type.ISOSCELES
  49:         
  50:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.24745 s] survived
   - [#  51] ROR isTriangle: 
--------------------------------------------------------------------------------
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
  45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
- 47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
+ 47:         elif (trian == 3 and Decimal(b) + Decimal(c) < Decimal(a)):
  48:             return Triangle.Type.ISOSCELES
  49:         
  50:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.22937 s] survived
   - [#  52] ROR isTriangle: 
--------------------------------------------------------------------------------
  43:         if (trian == 1 and Decimal(a) + Decimal(b) > Decimal(c)):
  44:             return Triangle.Type.ISOSCELES
  45:         elif (trian == 2 and Decimal(a) + Decimal(c) > Decimal(b)):
  46:             return Triangle.Type.ISOSCELES
- 47:         elif (trian == 3 and Decimal(b) + Decimal(c) > Decimal(a)):
+ 47:         elif (trian == 3 and Decimal(b) + Decimal(c) >= Decimal(a)):
  48:             return Triangle.Type.ISOSCELES
  49:         
  50:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.25106 s] survived
[*] Mutation score [13.97855 s]: 0.0%
   - all: 52
   - killed: 0 (0.0%)
   - survived: 52 (100.0%)
   - incompetent: 0 (0.0%)
   - timeout: 0 (0.0%)
